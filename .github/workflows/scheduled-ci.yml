name: Scheduled CI (GitHub Runners)

on:
  schedule:
    # Runs at 00:00 UTC on the 1st of every month
    - cron: '0 0 1 * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -e .

    - name: Run tests
      run: |
        pytest tests/ -v --cov=pygraham --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests-scheduled
        name: codecov-scheduled

  lint:
    name: Lint and type check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy
        pip install -e .

    - name: Run black
      run: black --check pygraham tests

    - name: Run ruff
      run: ruff check pygraham tests

    - name: Run mypy
      run: mypy pygraham
      continue-on-error: true

  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [test, lint]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      run: python -m build

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}-scheduled
        path: dist/*

  sonarqube:
    name: SonarQube Scan (Scheduled)
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -e .

      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=pygraham --cov-report=xml:coverage.xml --cov-report=term
        continue-on-error: true

      - name: Verify coverage file
        run: |
          if [ -f coverage.xml ]; then
            echo "Coverage file found"
            ls -lh coverage.xml
          else
            echo "Coverage file not found!"
          fi

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Show Quality Gate Status
        run: |
          echo "Quality Gate Status: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
